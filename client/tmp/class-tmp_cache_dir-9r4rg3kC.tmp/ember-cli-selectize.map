{"version":3,"sources":["ember-cli-selectize/components/ember-selectize.js","ember-cli-selectize/index.js","__reexport.js"],"sourcesContent":["define(\"ember-cli-selectize/components/ember-selectize\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var get = Ember.get, set = Ember.set, isArray = Ember.isArray, typeOf = Ember.typeOf,\n      getWithDefault = Ember.getWithDefault, camelize = Ember.String.camelize;\n\n    /**\n     * Ember.Selectize is an Ember View that encapsulates a Selectize component.\n     * The goal is to use this as a near dropin replacement for Ember.Select.\n     */\n    __exports__[\"default\"] = Ember.Component.extend({\n      attributeBindings : ['multiple','autocomplete','required'],\n      classNames : ['ember-selectize'],\n\n      autocomplete:'off',\n      // Allows to use prompt (like in Ember.Select) or placeholder property\n      placeholder: Ember.computed.alias('prompt'),\n      tagName : 'select',\n\n      /**\n      * overrideable object paths for value and label paths\n      */\n      optionValuePath : null,\n      optionLabelPath : null,\n\n      /**\n      * The array of the default plugins to load into selectize\n      */\n      plugins: ['remove_button'],\n\n      /**\n      * Computed properties that hold the processed paths ('content.' replacement),\n      * as it is done on Ember.Select\n      */\n      _valuePath : Ember.computed('optionValuePath',function(){\n        return getWithDefault(this,'optionValuePath','content.value').replace(/^content\\.?/, '');\n      }),\n      _labelPath : Ember.computed('optionLabelPath',function(){\n        return getWithDefault(this,'optionLabelPath','content.label').replace(/^content\\.?/, '');\n      }),\n\n      /**\n      * This flag should be true when the element is present in the DOM and false when if isn't.\n      * This helps to avoid triggering unecessary observers.\n      */\n      inDOM: false,\n\n      /**\n      * Pass a string to 'create' property to enable tag creation mode.\n      * When active, ember-selectize will send an action with that name to the application when a tag is created.\n      */\n      create:false,\n\n      /**\n      * Loading feature default values.\n      * If you want to override the css class that is applied, change the `loadingClass` property.\n      */\n      loading:false,\n      loadingClass:'loading',\n\n      /**\n      * The render function names selectize expects.\n      * We will use these to automatically infer the properties with the template and view names.\n      */\n      functionNames:['option','item','option_create','optgroup_header','optgroup'],\n      templateSuffix : 'Template',\n      viewSuffix : 'View',\n      renderOptions: Ember.computed(function(){\n        var functionNames = get(this,'functionNames'),\n        templateSuffix = get(this,'templateSuffix'),\n        viewSuffix = get(this,'viewSuffix'),\n        //this hash will contain the render functions\n        renderFunctions = {};\n\n        functionNames.forEach(function(item){\n          // infer the view name by camelizing selectize's function and appending a view suffix (overridable)\n          var viewPropertyName = camelize(item)+viewSuffix;\n          var viewToRender = get(this,viewPropertyName);\n\n          var self = this;\n          if(viewToRender){\n            // we have a view to render. set the function.\n            renderFunctions[item] = function(data){\n              return self._viewToString(viewToRender,data.data);\n            };\n          } else {\n            // there isn't a view to render. try to get a template.\n            // infer the template name by camelizing selectize's function and appending a template suffix (overridable)\n            var templatePropertyName = camelize(item)+templateSuffix;\n            var templateToRender = get(this,templatePropertyName);\n\n            if(templateToRender){\n              // we have a template to render. set the function.\n              renderFunctions[item] = function(data){\n                return self._templateToString(templateToRender,data.data);\n              };\n            }\n          }\n        },this);\n\n        return renderFunctions;\n      }),\n\n      selectizeOptions: Ember.computed(function() {\n        var allowCreate = get(this, 'create');\n\n        //We proxy callbacks through jQuery's 'proxy' to have the callbacks context set to 'this'\n        return {\n          plugins: this.plugins,\n          labelField : 'label',\n          valueField : 'value',\n          searchField : 'label',\n          create: allowCreate ? Ember.$.proxy(this._create, this) : false,\n          onItemAdd : Ember.$.proxy(this._onItemAdd, this),\n          onItemRemove : Ember.$.proxy(this._onItemRemove, this),\n          onType : Ember.$.proxy(this._onType, this),\n          render: get(this, 'renderOptions'),\n          placeholder: get(this,'placeholder')\n        };\n      }),\n\n      didInsertElement : function() {\n        //View is now in DOM\n        this.inDOM = true;\n\n        //Create Selectize's instance\n        this.$().selectize(get(this, 'selectizeOptions'));\n\n        //Save the created selectize instance\n        this.selectize = this.$()[0].selectize;\n\n        //Some changes to content, selection and disabled could have happened before the View was inserted into the DOM.\n        //We trigger all the observers manually to account for those changes.\n        this._disabledDidChange();\n        this._contentDidChange();\n        this._selectionDidChange();\n        this._loadingDidChange();\n      },\n      willDestroyElement : function() {\n        //Unbind observers\n        this._contentWillChange();\n        this._selectionWillChange();\n\n        //Invoke Selectize's destroy\n        this.selectize.destroy();\n\n        //We are no longer in DOM\n        this.inDOM = false;\n      },\n      /**\n      * Event callback that is triggered when user creates a tag\n      */\n      _create:function(input,callback){\n        // Delete user entered text\n        this.selectize.setTextboxValue('');\n        // Send create action\n        this.sendAction('create',input);\n        // We cancel the creation here, so it's up to you to include the created element\n        // in the content and selection property\n        callback(null);\n      },\n      /**\n      * Event callback that is triggered when user types in the input element\n      */\n      _onType:function(str){\n        set(this,'filter',str);\n      },\n      /**\n      * Event callback triggered when an item is added (when something is selected)\n      * Here we need to update our selection property (if single selection) or array (if multiple selection)\n      */\n      _onItemAdd : function(value) {\n        var content = get(this,'content');\n        var selection = get(this,'selection');\n        var multiple = get(this,'multiple');\n        if(content){\n          var obj = content.find(function(item){\n            if(get(item,get(this,'_valuePath')) === value){\n              return true;\n            }\n          },this);\n          if(multiple && isArray(selection) && obj){\n            if(!selection.findBy(get(this,'_valuePath'),get(obj,get(this,'_valuePath')))){\n              selection.addObject(obj);\n            }\n          } else if(obj){\n            if(!selection || (get(obj,get(this,'_valuePath')) !== get(selection,get(this,'_valuePath')))){\n              set(this,'selection',obj);\n            }\n          }\n        }\n      },\n      /**\n      * Event callback triggered when an item is removed (when something is deselected)\n      * Here we need to update our selection property (if single selection, here set to null) or remove item from array (if multiple selection)\n      */\n      _onItemRemove : function(value) {\n        if(this.removing){\n          return;\n        }\n        var content = get(this,'content');\n        var selection = get(this,'selection');\n        var multiple = get(this,'multiple');\n        if(content){\n          var obj = content.find(function(item){\n            if(get(item,get(this,'_valuePath')) === value){\n              return true;\n            }\n          },this);\n          if(multiple && isArray(selection) && obj){\n            selection.removeObject(obj);\n          } else if(!multiple){\n            this.set('selection',null);\n          }\n        }\n      },\n      /**\n      * Ember observer triggered before the selection property is changed\n      * We need to unbind any array observers if we're in multiple selection\n      */\n      _selectionWillChange: Ember.beforeObserver(function() {\n        var multiple = get(this, 'multiple');\n        var selection = get(this, 'selection');\n        if(selection && isArray(selection) && multiple) {\n          selection.removeArrayObserver(this,  {\n            willChange : 'selectionArrayWillChange',\n            didChange : 'selectionArrayDidChange'\n          });\n          var len = selection ? get(selection, 'length') : 0;\n          this.selectionArrayWillChange(selection, 0, len);\n        }\n      }, 'selection'),\n      /**\n      * Ember observer triggered when the selection property is changed\n      * We need to bind an array observer when selection is multiple\n      */\n      _selectionDidChange : Ember.observer(function() {\n        if(!this.inDOM){\n          return;\n        }\n        var multiple = get(this, 'multiple');\n        var selection = get(this, 'selection');\n        if (multiple) {\n          if(selection) {\n            if(!isArray(selection)){\n              selection = Ember.A([selection]);\n              set(this,'selection',selection);\n              return;\n            }\n            selection.addArrayObserver(this, {\n              willChange : 'selectionArrayWillChange',\n              didChange : 'selectionArrayDidChange'\n            });\n          } else {\n            set(this,'selection',[]);\n            return;\n          }\n          var len = selection ? get(selection, 'length') : 0;\n          this.selectionArrayDidChange(selection, 0, null, len);\n        } else {\n          if(selection) {\n            this.selectize.addItem(get(selection,get(this,'_valuePath')));\n          } else {\n            set(this,'selection',null);\n            if(this.selectize){\n              this.selectize.clear();\n              this.selectize.showInput();\n            }\n          }\n        }\n      }, 'selection'),\n      /*\n      * Triggered before the selection array changes\n      * Here we process the removed elements\n      */\n      selectionArrayWillChange : function(array, idx, removedCount) {\n        this.removing = true;\n        for (var i = idx; i < idx + removedCount; i++) {\n          this.selectionObjectWasRemoved(array.objectAt(i));\n        }\n        this.removing = false;\n      },\n      /*\n      * Triggered after the selection array changes\n      * Here we process the inserted elements\n      */\n      selectionArrayDidChange : function(array, idx, removedCount, addedCount) {\n        for (var i = idx; i < idx + addedCount; i++) {\n          this.selectionObjectWasAdded(array.objectAt(i), i);\n        }\n      },\n      /*\n      * Function that is responsible for Selectize's item inserting logic\n      */\n      selectionObjectWasAdded : function(obj) {\n        if(this.selectize){\n          this.selectize.addItem(get(obj,get(this,'_valuePath')));\n        }\n      },\n      /*\n      * Function that is responsible for Selectize's item removing logic\n      */\n      selectionObjectWasRemoved : function(obj) {\n        if(this.selectize){\n          this.selectize.removeItem(get(obj,get(this,'_valuePath')));\n        }\n      },\n      /**\n      * Ember observer triggered before the content property is changed\n      * We need to unbind any array observers\n      */\n      _contentWillChange: Ember.beforeObserver(function() {\n        if(!this.inDOM){\n          return;\n        }\n        var content = get(this, 'content');\n        if(content) {\n          content.removeArrayObserver(this, {\n            willChange : 'contentArrayWillChange',\n            didChange : 'contentArrayDidChange'\n          });\n        }\n        //Trigger remove logic\n        var len = content ? get(content, 'length') : 0;\n        this.removing = true;\n        this.contentArrayWillChange(content, 0, len);\n        this.removing = false;\n        this._selectionDidChange();\n      }, 'content'),\n      /**\n      * Ember observer triggered when the content property is changed\n      * We need to bind an array observer to become notified of its changes\n      */\n      _contentDidChange : Ember.observer(function() {\n        if(!this.inDOM){\n          return;\n        }\n        var content = get(this, 'content');\n        if (content) {\n          content.addArrayObserver(this, {\n            willChange : 'contentArrayWillChange',\n            didChange : 'contentArrayDidChange'\n          });\n        }\n        var len = content ? get(content, 'length') : 0;\n        this.contentArrayDidChange(content, 0, null, len);\n      }, 'content'),\n      /*\n      * Triggered before the content array changes\n      * Here we process the removed elements\n      */\n      contentArrayWillChange : function(array, idx, removedCount) {\n        for (var i = idx; i < idx + removedCount; i++) {\n          this.objectWasRemoved(array.objectAt(i));\n        }\n\n        if(this.selectize){\n          this.selectize.refreshOptions(this.selectize.isFocused && !this.selectize.isInputHidden);\n        }\n\n        this._selectionDidChange();\n      },\n      /*\n      * Triggered after the content array changes\n      * Here we process the inserted elements\n      */\n      contentArrayDidChange : function(array, idx, removedCount, addedCount) {\n        for (var i = idx; i < idx + addedCount; i++) {\n          this.objectWasAdded(array.objectAt(i), i);\n        }\n\n        if(this.selectize){\n          this.selectize.refreshOptions(this.selectize.isFocused && !this.selectize.isInputHidden);\n        }\n\n        this._selectionDidChange();\n      },\n      /*\n      * Function that is responsible for Selectize's option inserting logic\n      * If the option is an object or Ember instance, we set an observer on the label value of it.\n      * This way, we can later update the label of it.\n      * Useful for dealing with objects that 'lazy load' some properties/relationships.\n      */\n      objectWasAdded : function(obj) {\n        var data = {};\n        if(typeOf(obj) === 'object' || typeOf(obj) === 'instance'){\n          data = {\n            label : get(obj, get(this,'_labelPath')),\n            value : get(obj, get(this,'_valuePath')),\n            data : obj\n          };\n          Ember.addObserver(obj,get(this,'_labelPath'),this,'_labelDidChange');\n        } else {\n          data = {\n            label : obj,\n            value : obj,\n            data : obj\n          };\n        }\n\n        if(this.selectize){\n          this.selectize.addOption(data);\n        }\n      },\n      /*\n      * Function that is responsible for Selectize's option removing logic\n      */\n      objectWasRemoved : function(obj) {\n        if(typeOf(obj) === 'object' || typeOf(obj) === 'instance'){\n          Ember.removeObserver(obj,get(this,'_labelPath'),this,'_labelDidChange');\n        }\n        if(this.selectize){\n          this.selectize.removeOption(get(obj, get(this,'_valuePath')));\n        }\n      },\n      /*\n      * Ember Observer that triggers when an option's label changes.\n      * Here we need to update its corresponding option with the new data\n      */\n      _labelDidChange: function(sender) {\n        if(!this.selectize){\n          return;\n        }\n        var data = {\n          label : get(sender, get(this,'_labelPath')),\n          value : get(sender, get(this,'_valuePath')),\n          data : sender\n        };\n        this.selectize.updateOption(data.value,data);\n      },\n      /*\n      * Observer on the disabled property that enables or disables selectize.\n      */\n      _disabledDidChange: Ember.observer(function(){\n        if(!this.selectize){\n          return;\n        }\n        var disable = get(this,'disabled');\n        if(disable){\n          this.selectize.disable();\n        } else {\n          this.selectize.enable();\n        }\n      },'disabled'),\n      /*\n      * Observer on the placeholder property that updates selectize's placeholder.\n      */\n      _placeholderDidChange: Ember.observer(function(){\n        if(!this.selectize){\n          return;\n        }\n        var placeholder = get(this,'placeholder');\n        this.selectize.settings.placeholder = placeholder;\n        this.selectize.updatePlaceholder();\n      },'placeholder'),\n      /*\n      * Observer on the loading property.\n      * Here we add/remove a css class, similarly to how selectize does.\n      */\n      _loadingDidChange:Ember.observer(function(){\n        var loading = get(this,'loading'),\n        loadingClass = get(this,'loadingClass');\n        if(loading){\n          this.selectize.$wrapper.addClass(loadingClass);\n        } else {\n          this.selectize.$wrapper.removeClass(loadingClass);\n        }\n      },'loading'),\n\n      _templateToString:function(template,data) {\n        //create a view with a template\n        var view = this.createChildView(Ember.View, {\n          templateName: template,\n          context:data\n        });\n        return this._getStringFromView(view);\n      },\n      _viewToString:function(viewName,data) {\n        //create a view with the given name\n        var view = this.createChildView(viewName, {\n          context:data\n        });\n        return this._getStringFromView(view);\n      },\n      /*\n      * Encapsulates the logic of converting a view to a string\n      */\n      //FIX ME: this method does not work in Ember 1.8.0\n      //see http://git.io/VUYZ4g for more info\n      _getStringFromView:function(view){\n        var buffer = new Ember.RenderBuffer();\n        view.renderToBuffer(buffer);\n        return buffer.string();\n      }\n    });\n  });","define(\"ember-cli-selectize/index\", \n  [\"ember-cli-selectize/components/ember-selectize\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmberSelectizeComponent = __dependency1__[\"default\"];\n\n    __exports__.EmberSelectizeComponent = EmberSelectizeComponent;\n  });","define(\"ember-cli-selectize\", [\"ember-cli-selectize/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n"],"names":[],"mappingsjfA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;","file":"ember-cli-selectize.js"}